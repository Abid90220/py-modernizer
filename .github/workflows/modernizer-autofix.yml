name: Modernizer (Auto-fix)

on:
  workflow_dispatch: # Run only when manually triggered

permissions:
  contents: write # allow pushing commits

jobs:
  autofix:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12"]

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install tools
        run: |
          python -m pip install --upgrade pip
          pip install ruff black pyupgrade pip-tools pur poetry

      # -------------------
      # Code Modernization
      # -------------------
      - name: Run Ruff auto-fix
        run: ruff check . --fix

      - name: Run Black auto-format
        run: black .

      - name: Run Pyupgrade
        run: |
          set -e
          for file in $(git ls-files '*.py'); do
            pyupgrade --py311-plus "$file" || true
          done

      # -------------------
      # Dependency Upgrades
      # -------------------
      - name: Upgrade dependencies
        shell: bash
        run: |
          set -e
          python -m pip install --upgrade pip
          pip install pip-tools pur toml

          # 1) requirements.in / requirements.txt
          if [ -f requirements.in ]; then
            echo "requirements.in detected — compiling and upgrading..."
            pip-compile --upgrade --allow-unsafe
            pip install -r requirements.txt

          elif [ -f requirements.txt ]; then
            echo "requirements.txt detected — upgrading in place..."
            pur -r requirements.txt || true
            pip install -r requirements.txt

          # 2) pyproject.toml (PEP 621)
          elif [ -f pyproject.toml ]; then
            echo "pyproject.toml detected — upgrading declared dependencies..."
            python <<'PY'

          import subprocess, sys
            try:
                import toml  # installed above, but be defensive
            except Exception:
                subprocess.check_call([sys.executable, "-m", "pip", "install", "toml"])
                import toml

          data = toml.load("pyproject.toml")

            deps = []
            if "project" in data:
                proj = data["project"]
                if "dependencies" in proj:
                    deps.extend(proj["dependencies"])
                if "optional-dependencies" in proj:
                    for group in proj["optional-dependencies"].values():
                        deps.extend(group)

            for dep in deps:
            pkg = dep.split()[0]
            subprocess.call([sys.executable, "-m", "pip", "install", "--upgrade", pkg])


            elif [ -f setup.py ]; then
            echo "setup.py detected — editable install (no lock file to upgrade)..."
            pip install -e . || true

            else
            echo "No recognized dependency file found."
            fi

      # -------------------
      # Commit & Push Changes
      # -------------------
      - name: Commit and push changes
        if: matrix.python-version == '3.11' # only commit once
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git add .
          git commit -m "chore: auto-fix (ruff, black, pyupgrade, deps)" || echo "No changes to commit"
          git push
